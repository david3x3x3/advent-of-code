import sys, copy

mapsize = int(sys.argv[2])
mymaps = []
mymap = []
steps = []
dirs = ((0, 1),(1,0),(0,-1),(-1,0))
dirnames = 'RDLU'
dir = 0

# layout:
#
#  01
#  2
# 34
# 5

with open(sys.argv[1]) as fp:
    print(mymaps)
    # maps 0+1
    mymaps += [[],[]]
    for r1 in range(mapsize):
        mymaps[0] += [[]]
        mymaps[1] += [[]]
        line = fp.readline().rstrip()
        for c1 in range(mapsize):
            mymaps[0][r1] += line[mapsize+c1]
            mymaps[1][r1] += line[mapsize*2+c1]
    # maps 2
    mymaps += [[]]
    for r1 in range(mapsize):
        mymaps[2] += [[]]
        line = fp.readline().rstrip()
        for c1 in range(mapsize):
            mymaps[2][r1] += line[mapsize+c1]
    # maps 3+4
    mymaps += [[],[]]
    for r1 in range(mapsize):
        mymaps[3] += [[]]
        mymaps[4] += [[]]
        line = fp.readline().rstrip()
        for c1 in range(mapsize):
            mymaps[3][r1] += line[c1]
            mymaps[4][r1] += line[mapsize+c1]
    # maps 5
    mymaps += [[]]
    for r1 in range(mapsize):
        mymaps[5] += [[]]
        line = fp.readline().rstrip()
        for c1 in range(mapsize):
            mymaps[5][r1] += line[c1]

    for i, mymap in enumerate(mymaps):
        print(f'map #{i}')
        #print('\n'.join([''.join(s) for s in mymap]))

    line = fp.readline().strip()
    line = fp.readline().strip()
    print(line)
    j = 0
    for i, c in enumerate(line):
        if not c.isnumeric():
            print(j,i)
            steps += [(int(line[j:i]), c)]
            j = i+1
    steps += [ (int(line[j:]), '') ]

print(steps)
#print('\n'.join([''.join(x) for x in mymap]))

borders = []
# list the following:
#  adjacent map#
#  new direction
#  whether to change from r to c or c to r
#  whether or not to reverse coords

borders += [[[1,0],[2,1],[3,0],[5,0]]] # map 0
borders += [[[4,2],[2,2],[0,2],[5,3]]] # map 1
borders += [[[1,3],[4,1],[3,1],[0,3]]] # map 2
borders += [[[4,0],[5,1],[0,0],[2,0]]] # map 3
borders += [[[1,2],[5,2],[3,2],[2,3]]] # map 4
borders += [[[4,3],[1,1],[0,1],[3,3]]] # map 5

print(borders)

mapnum = 0
mymap = mymaps[mapnum]
r1 = 0
c1 = mymap[0].index('.')
for count, turn in steps:
    print(f'count = {count}, turn = {turn}')
    for x in range(count):
        # move
        r2 = r1 + dirs[dir][0]
        c2 = c1 + dirs[dir][1]
        if c2 >= mapsize or c2 < 0 or r2 >= mapsize or r2 < 0:
            # wrapped 
            mapnum2 = borders[mapnum][dir][0]
            dir2 = borders[mapnum][dir][1]
            mymap2 = mymaps[mapnum2]
            if dir2 == 0 or dir2 == 2:
                r3 = [r2, mapsize-1-c2, mapsize-1-r2, c2][dir]
                if dir2 == 2:
                    r3 = mapsize-1-r3
                row = mymap2[r3]
                if dir2 == 0:
                    if row[0] == '#':
                        break
                    c2 = 0
                else:
                    if row[-1] == '#':
                        break
                    c2 = mapsize-1
                r2 = r3
            else:
                # dir2 == 1 or dir2 == 3
                c3 = [mapsize-1-r2, c2, r2, mapsize-1-c2][dir]
                if dir2 == 3:
                    c3 = mapsize-1-c3
                row = ''.join([mymap2[r][c3] for r in range(mapsize)])
                if dir2 == 1:
                    if row[0] == '#':
                        break
                    r2 = 0
                else:
                    if row[-1] == '#':
                        break
                    r2 = mapsize-1
                c2 = c3
            mapnum = mapnum2
            mymap = mymap2
            dir = dir2
        elif mymap[r2][c2] == '#':
            print('blocked without wrapping')
            # blocked
            break
        r1, c1 = r2, c2
        print(f'after step = {r1},{c1}')

        print('- moving')
        print(f'moving {count}, {turn}, loc = {r1},{c1}, mapnum = {mapnum}')
        # mymap2 = copy.deepcopy(mymap)
        # mymap2[r1][c1] = '>v<^'[dir]
        # print('\n'.join([''.join(x) for x in mymap2]))

    print(f'after move = {r1},{c1}')
    #mymap2 = copy.deepcopy(mymap)
    #mymap2[r1][c1] = '@'
    #print('\n'.join([''.join(x) for x in mymap2]))

    # turn
    if turn == '':
        break
    elif turn == 'R':
        dir = (dir+1)%4
    elif turn == 'L':
        dir = (dir+3)%4
    else:
        print("unknown turn")
        exit(1)
    print(f'newdir = {dir}')

    print(f'- turning {turn}')
    print(f'moving {count}, {turn}, loc = {r1},{c1}, mapnum = {mapnum}')
    # mymap2 = copy.deepcopy(mymap)
    # mymap2[r1][c1] = '>v<^'[dir]
    # print('\n'.join([''.join(x) for x in mymap2]))

#print('\n'.join([''.join(x) for x in mymap]))
    
print(f'row = {r1}, col = {c1}, dir = {dir}, mapnum = {mapnum}')

offsets = [[0,1],[0,2],[1,1],[2,0],[2,1],[3,0]]

r2 = offsets[mapnum][0] * mapsize + r1
c2 = offsets[mapnum][1] * mapsize + c1

print((r2+1)*1000+(c2+1)*4+dir)
